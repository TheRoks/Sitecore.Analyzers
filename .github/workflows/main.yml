name: Build, Test, Pack and Publish
on:
  push:
  pull_request:
  release:
    types:
      - published
env:
  # Stop wasting time caching packages
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # Disable sending usage data to Microsoft
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  # Project name to pack and publish
  PROJECT_NAME: TheRoks.Sitecore.Analyzers.Package
  # GitHub Packages Feed settings
  GITHUB_FEED: https://nuget.pkg.github.com/theroks/
  GITHUB_USER: theroks
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # Official NuGet Feed settings
  NUGET_FEED: https://api.nuget.org/v3/index.json
  NUGET_KEY: ${{ secrets.NUGET_KEY }}

defaults:
  run:
    shell: bash

jobs:
  build:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.301
    - name: Install dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --configuration Release --version-suffix prerelease-$(date +%Y%m%d%H%M%S)
    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: nupkg
        path: ./src/${{ env.PROJECT_NAME }}/bin/Release/*.nupkg
  prerelease:
    needs: build
    if: github.ref == 'refs/heads/develop'
    runs-on: windows-latest
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v1
        with:
          name: nupkg
      - name: Push to GitHub Feed
        run: |
          for f in ./nupkg/*.nupkg
          do
            curl -vX PUT -u "${GITHUB_USER}:${GITHUB_TOKEN}" -F package=@$f ${GITHUB_FEED}
          done
  deploy:
    needs: build
    if: github.event_name == 'release'
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.301
      - name: Create Release NuGet package
        id: set_version
        run: |
          arrTag=(${GITHUB_REF//\// })
          VERSION="${arrTag[2]}"
          echo Version: $VERSION
          VERSION="${VERSION//v}"
          echo Clean Version: $VERSION
          echo ::set-output name=version::${VERSION}
      - name: Build
        run: dotnet build --configuration Release /p:Version=${{ steps.set_version.outputs.version }}
      - name: Push to GitHub Feed
        run: |
          for f in ./src/${PROJECT_NAME}/bin/Release/*.nupkg
          do
            curl -vX PUT -u "${GITHUB_USER}:${GITHUB_TOKEN}" -F package=@$f ${GITHUB_FEED}
          done
      - name: Push to NuGet Feed
        run: dotnet nuget push ./src/${{ env.PROJECT_NAME }}/bin/Release/*.nupkg --source ${NUGET_FEED} --skip-duplicate --api-key ${NUGET_KEY}